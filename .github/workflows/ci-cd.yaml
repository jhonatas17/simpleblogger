name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: simpleblogger
  DOCKER_REPO: jhonatas17/simpleblogger
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get short commit SHA
        id: vars
        run: echo "commit_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images (latest + commit tag)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:latest
            ${{ env.DOCKER_REPO }}:${{ steps.vars.outputs.commit_tag }}

      - name: Save commit tag to file
        run: echo "${{ steps.vars.outputs.commit_tag }}" > commit-tag.txt

      - name: Upload commit tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: commit-tag
          path: commit-tag.txt

  scan-sast:
    name: Static App Security Scan (SAST)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy SAST scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          scanners: vuln,config,secret
          format: json
          ignore-unfixed: true
          exit-code: 0
          output: trivy-sast-report.json

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sast-report
          path: trivy-sast-report.json

  scan-dast:
    name: Docker Image Security Scan (DAST)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Download commit tag
        uses: actions/download-artifact@v4
        with:
          name: commit-tag
          path: .

      - name: Read commit tag
        id: read_commit
        run: echo "COMMIT_TAG=$(cat commit-tag.txt)" >> $GITHUB_ENV

      - name: Run Trivy DAST scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REPO }}:${{ env.COMMIT_TAG }}
          format: json
          vuln-type: os,library
          ignore-unfixed: true
          exit-code: 0
          output: trivy-dast-report.json

      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dast-report
          path: trivy-dast-report.json

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [scan-sast, scan-dast]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download commit tag
        uses: actions/download-artifact@v4
        with:
          name: commit-tag
          path: .

      - name: Read commit tag
        id: read_commit
        run: echo "COMMIT_TAG=$(cat commit-tag.txt)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name dev-cluster --region ${{ env.AWS_REGION }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install simplebloggerapi ./k8s/ \
            --set image.repository=${{ env.DOCKER_REPO }} \
            --set image.tag=${{ env.COMMIT_TAG }} \
            --set env[0].name=MONGODB_URI  --set env[0].value="${{ secrets.MONGODB_URI }}" \
            --set env[1].name=JWT_SECRET   --set env[1].value="${{ secrets.JWT_SECRET }}" \
            --set env[2].name=JWT_EXPIRE   --set env[2].value="${{ secrets.JWT_EXPIRE }}" \
            --set env[3].name=PORT         --set env[3].value="${{ secrets.PORT }}" 

  invoke-lambda:
    name: Invoke Lambda (Health Check)
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Invoke AWS Lambda
        run: |
          echo "Invocando Lambda para checar o endpoint da aplicação..."

          aws lambda invoke \
            --function-name dockerhub-webhook \
            --cli-binary-format raw-in-base64-out \
            --payload '{"url": "https://cgfbu5cyackbl4flmu6ikce6sq0oeyym.lambda-url.us-east-1.on.aws/  "}' \
            response.json

          echo "Resposta da Lambda:"
          cat response.json | jq .

          STATUS_CODE=$(jq -r '.statusCode' response.json)
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "❌ Falha: Lambda retornou código $STATUS_CODE"
            exit 1
          fi

          echo "✅ Lambda executada com sucesso e endpoint retornou 200!"

